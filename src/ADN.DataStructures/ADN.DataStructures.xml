<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADN.DataStructures</name>
    </assembly>
    <members>
        <member name="T:ADN.DataStructures.BidirDictionary`2">
            <summary>
            Represents a two-way Dictionary.
            </summary>
            <typeparam name="T1">The first type of the elements in the dictionary.</typeparam>
            <typeparam name="T2">The second type of the elements in the dictionary.</typeparam>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the BidirDictionary.
            </summary>
            <returns>Returns an enumerator that iterates through the forward Dictionary.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            foreach (var item in bidirDictionary)
            {
                Console.WriteLine($"T1: {item.Key} T2: {item.Value}");
            }
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element into the BidirDictionary.
            </summary>
            <param name="t1">The first type of the elements in the dictionary.</param>
            <param name="t2">The second type of the elements in the dictionary.</param>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.Clear">
            <summary>
            Removes all elements from the BidirDictionary.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            bidirDictionary.Clear();
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.Contains(`0)">
            <summary>
            Determines whether the BidirDictionary contains a T1 item.
            </summary>
            <param name="t1">The first type of the elements in the dictionary.</param>
            <returns>True if the BidirDictionary contains T1 element; otherwise, false.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            var exists = bidirDictionary.Contains(0);
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.ContainsReverse(`1)">
            <summary>
            Determines whether the BidirDictionary contains a T2 item.
            </summary>
            <param name="t2">The second type of the elements in the dictionary.</param>
            <returns>True if the BidirDictionary contains T2 element; otherwise, false.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            var exists = bidirDictionary.ContainsReverse("foo");
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the BidirDictionary.
            </summary>
            <returns>The number of items contained in the BidirDictionary.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            var count = bidirDictionary.Count();
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.Get(`0)">
            <summary>
            Gets the value associated with T1 element.
            </summary>
            <param name="t1">The first type of the elements in the dictionary.</param>
            <returns>The value associated with T1 element.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            var t1 = bidirDictionary.Get(0);
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.GetReverse(`1)">
            <summary>
            Gets the value associated with T2 element.
            </summary>
            <param name="t2">The second type of the elements in the dictionary.</param>
            <returns>The value associated with T2 element.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            var t2 = bidirDictionary.GetReverse("foo");
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.Remove(`0)">
            <summary>
            Removes the element T1 from the BidirDictionary.
            </summary>
            <param name="t1">The T1 element to remove.</param>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            bidirDictionary.Remove(0);
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirDictionary`2.RemoveReverse(`1)">
            <summary>
            Removes the element T2 from the BidirDictionary.
            </summary>
            <param name="t2">The T2 element to remove.</param>
            <example>
            <code lang="csharp">
            <![CDATA[var bidirDictionary = new BidirDictionary<int, string>();]]>
            bidirDictionary.Add(0, "foo");
            bidirDictionary.RemoveReverse("foo");
            </code>
            </example>
        </member>
        <member name="T:ADN.DataStructures.BidirHashtable">
            <summary>
            Represents a collection of key/value pairs that are organized based on both hash code.
            </summary>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value into the BidirHashtable.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="val">The value of the element to add.</param>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.Clear">
            <summary>
            Removes all elements from the BidirHashtable.
            </summary>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            bidirHashtable.Clear();
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.Contains(System.Object)">
            <summary>
            Determines whether the BidirHashtable contains a specific key.
            </summary>
            <param name="key">The key to locate in the BidirHashtable.</param>
            <returns>True if the BidirHashtable contains an element with the specified key; otherwise, false.</returns>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            var result = bidirHashtable.Contains("key");
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.ContainsValue(System.Object)">
            <summary>
            Determines whether the BidirHashtable contains a specific value.
            </summary>
            <param name="val">The value to locate in the BidirHashtable.</param>
            <returns>True if the BidirHashtable contains an element with the specified value; otherwise, false.</returns>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            var result = bidirHashtable.ContainsValue("value");
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.Count">
            <summary>
            Gets the number of key/value pairs contained in the BidirHashtable.
            </summary>
            <returns>The number of key/value pairs contained in the BidirHashtable.</returns>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            bidirHashtable.Add("key2", "value2");
            var result = bidirHashtable.Count();
            
            /*
            result is 2
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.Get(System.Object)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <returns>The value associated with the specified key.</returns>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            var result = bidirHashtable.Get("key");
            
            /*
            result is "value"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.GetKey(System.Object)">
            <summary>
            Gets the key associated with the specified value.
            </summary>
            <param name="val">The value whose key to get.</param>
            <returns>The key associated with the specified value.</returns>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            var result = bidirHashtable.GetKey("value");
            
            /*
            result is "key"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.Set(System.Object,System.Object)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to set.</param>
            <param name="val">The value of the element to set.</param>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            bidirHashtable.Set("key", "foo");
            var result = bidirHashtable.Get("key");
            
            /*
            result is "foo"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the BidirHashtable.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            bidirHashtable.Remove("key");
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.BidirHashtable.RemoveValue(System.Object)">
            <summary>
            Removes the element with the specified value from the BidirHashtable.
            </summary>
            <param name="val">The value of the element to remove.</param>
            <example>
            <code lang="csharp">
            var bidirHashtable = new BidirHashtable();
            bidirHashtable.Add("key", "value");
            bidirHashtable.RemoveValue("value");
            </code>
            </example>
        </member>
        <member name="T:ADN.DataStructures.Heap`1">
            <summary>
            Array-based Heap implementation.
            </summary>
            <typeparam name="T">Kind of thing being stored in the heap.</typeparam>
        </member>
        <member name="M:ADN.DataStructures.Heap`1.#ctor(System.Int32)">
            <summary>
            Create a new heap.
            </summary>
            <param name="minSize">The minimum number of elements the heap is expected to hold.</param>
        </member>
        <member name="P:ADN.DataStructures.Heap`1.Count">
            <summary>
            Current size of the Heap.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[var heap = new Heap<int>(2);]]>
            heap.Insert(1);
            heap.Insert(2);
            var result = heap.Count;
            
            /*
            result is 2
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.Heap`1.Insert(`0)">
            <summary>
            Add a new value to the Heap.
            </summary>
            <param name="val">New value.</param>
            <example>
            <code lang="csharp">
            <![CDATA[var heap = new Heap<int>(1);]]>
            heap.Insert(1);
            </code>
            </example>
        </member>
        <member name="P:ADN.DataStructures.Heap`1.IsEmpty">
            <summary>
            Test to see if the Heap is empty.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[var heap = new Heap<int>(1);]]>
            var result = heap.IsEmpty;
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.Heap`1.Peek">
            <summary>
            View the value currently at the top of the Heap.
            </summary>
            <returns>Value at the top of the Heap.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var heap = new Heap<int>(1);]]>
            heap.Insert(1);
            heap.Insert(2);
            heap.Insert(3);
            var result = heap.Peek();
            
            /*
            result is 1
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.Heap`1.Remove">
            <summary>
            Remove the value currently at the top of the Heap and return it.
            </summary>
            <returns>Value at the top of the Heap.</returns>
            <example>
            <code lang="csharp">
            <![CDATA[var heap = new Heap<int>(1);]]>
            heap.Insert(1);
            heap.Insert(2);
            heap.Insert(3);
            var result = heap.Remove();
            
            /*
            result is 1
            */
            </code>
            </example>
        </member>
        <member name="T:ADN.DataStructures.IHeap`1">
            <summary>
            Array-based Heap implementation.
            </summary>
            <typeparam name="T">Kind of thing being stored in the heap.</typeparam>
        </member>
        <member name="P:ADN.DataStructures.IHeap`1.Count">
            <summary>
            Current size of the Heap.
            </summary>
        </member>
        <member name="M:ADN.DataStructures.IHeap`1.Insert(`0)">
            <summary>
            Add a new value to the Heap.
            </summary>
            <param name="val">New value.</param>
        </member>
        <member name="P:ADN.DataStructures.IHeap`1.IsEmpty">
            <summary>
            Test to see if the Heap is empty.
            </summary>
        </member>
        <member name="M:ADN.DataStructures.IHeap`1.Peek">
            <summary>
            View the value currently at the top of the Heap.
            </summary>
            <returns>Value at the top of the Heap.</returns>
        </member>
        <member name="M:ADN.DataStructures.IHeap`1.Remove">
            <summary>
            Remove the value currently at the top of the Heap and return it.
            </summary>
            <returns>Value at the top of the Heap.</returns>
        </member>
        <member name="T:ADN.DataStructures.MaxHeap`1">
            <summary>
            Array-based Heap implementation.
            </summary>
            <typeparam name="T">Kind of thing being stored in the heap.</typeparam>
        </member>
        <member name="M:ADN.DataStructures.MaxHeap`1.#ctor(System.Int32)">
            <summary>
            Create a new heap.
            </summary>
            <param name="minSize">The minimum number of elements the heap is expected to hold.</param>
        </member>
        <member name="T:ADN.DataStructures.MinHeap`1">
            <summary>
            Array-based Heap implementation.
            </summary>
            <typeparam name="T">Kind of thing being stored in the heap.</typeparam>
        </member>
        <member name="M:ADN.DataStructures.MinHeap`1.#ctor(System.Int32)">
            <summary>
            Create a new heap.
            </summary>
            <param name="minSize">The minimum number of elements the heap is expected to hold.</param>
        </member>
        <member name="T:ADN.DataStructures.MultilevelQueue`1">
            <summary>
            Queue with priority elements.
            </summary>
            <typeparam name="T">Kind of thing being stored in the ADN.DataStructures.MultilevelQueue.</typeparam>
        </member>
        <member name="M:ADN.DataStructures.MultilevelQueue`1.#ctor(System.Int32,System.UInt32)">
            <summary>
            Create a new ADN.DataStructures.MultilevelQueue.
            </summary>
            <param name="priorityLevels">Determines how many levels of messages priority exists.</param>
            <param name="secondsToAgingItems">Seconds to aging elements and increase the priority.</param>
        </member>
        <member name="M:ADN.DataStructures.MultilevelQueue`1.Dispose">
            <summary>
            Releases all resources used by the current instance of ADN.DataStructures.MultilevelQueue.
            </summary>
        </member>
        <member name="P:ADN.DataStructures.MultilevelQueue`1.Count">
             <summary>
             Gets the number of elements contained in the ADN.DataStructures.MultilevelQueue.
             </summary>
             <returns>The number of elements contained in the ADN.DataStructures.MultilevelQueue.</returns>
             <example>
             <code lang="csharp">
             <![CDATA[var queue = new MultilevelQueue<string>(3, 10);]]>
             queue.Add("item low priority", 9);
             queue.Add("item high priority", 0);
             var result = queue.Count;
            
             /*
             result is 2
             */
             </code>
             </example>
        </member>
        <member name="M:ADN.DataStructures.MultilevelQueue`1.Add(`0,System.Int32)">
            <summary>
            Add a new value with the specific priority.
            </summary>
            <param name="item">New item.</param>
            <param name="priority">Priority.</param>
            <example>
            <code lang="csharp">
            <![CDATA[var queue = new MultilevelQueue<string>(3, 10);]]>
            queue.Add("item low priority", 9);
            queue.Add("item high priority", 0);
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.MultilevelQueue`1.Peek">
             <summary>
             View the value currently at the top of the queue.
             </summary>
             <returns>Value at the top of the queue.</returns>
             <example>
             <code lang="csharp">
             <![CDATA[var queue = new MultilevelQueue<string>(3, 10);]]>
             queue.Add("item low priority", 9);
             queue.Add("item high priority", 0);
             var result = queue.Peek();
            
             /*
             result is "item high priority"
             */
             </code>
             </example>
        </member>
        <member name="M:ADN.DataStructures.MultilevelQueue`1.Remove">
             <summary>
             Remove the value currently at the top of the ADN.DataStructures.MultilevelQueue and return it.
             </summary>
             <returns>Value at the top of the queue.</returns>
             <example>
             <code lang="csharp">
             <![CDATA[var queue = new MultilevelQueue<string>(3, 10);]]>
             queue.Add("item low priority", 9);
             queue.Add("item high priority", 0);
             var result = queue.Remove();
            
             /*
             result is "item high priority"
             */
             </code>
             </example>
        </member>
        <member name="T:ADN.DataStructures.TwoKeyHashtable">
            <summary>
            Represents a collection of 2-keys/value trios that are organized based on the hash code of the 2-keys.
            </summary>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.Add(System.Object,System.Object,System.Object)">
            <summary>
            Adds an element with the specified keys and value into the TwoKeyHashtable.
            </summary>
            <param name="key">The first key of the element to add.</param>
            <param name="key2">The second key of the element to add.</param>
            <param name="val">The value of the element to add.</param>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.Clear">
            <summary>
            Removes all elements from the TwoKeyHashtable.
            </summary>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            var result = twoKeyHashtable.Clear();
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.Contains(System.Object,System.Object)">
            <summary>
            Determines whether the TwoKeyHashtable contains the two specific key element.
            </summary>
            <param name="key">The first key to locate in the TwoKeyHashtable.</param>
            <param name="key2">The second key to locate in the TwoKeyHashtable.</param>
            <returns>True if contains the two specific key element, false otherwise.</returns>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            var result = twoKeyHashtable.Contains("key", "key2");
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.ContainsRow(System.Object)">
            <summary>
            Determines whether the TwoKeyHashtable contains the specific row.
            </summary>
            <param name="key">The key to locate in the TwoKeyHashtable.</param>
            <returns>True if contains the specific key element, false otherwise.</returns>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            var result = twoKeyHashtable.ContainsRow("key");
            
            /*
            result is true
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.Count(System.Object)">
            <summary>
            Gets the number of key/value pairs contained in a dimension of the TwoKeyHashtable.
            </summary>
            <param name="key">The dimension key of the TwoKeyHashtable.</param>
            <returns>The number of elements contained in the TwoKeyHashtable for a specific dimension.</returns>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            var result = twoKeyHashtable.Count("key");
            
            /*
            result is 1
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.CountRow">
            <summary>
            Gets the number of first key trios contained in the TwoKeyHashtable.
            </summary>
            <returns>The number of elements contained in the TwoKeyHashtable.</returns>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            var result = twoKeyHashtable.CountRow();
            
            /*
            result is 1
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.Item(System.Object,System.Object)">
            <summary>
            Gets the value associated with the specified keys.
            </summary>
            <param name="key">The first key whose value to get or set.</param>
            <param name="key2">The second key whose value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            var result = twoKeyHashtable.Item("key", "key2");
            
            /*
            result is "value"
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.Keys">
            <summary>
            Gets an ICollection containing the keys in the TwoKeyHashtable.
            </summary>
            <returns>An ICollection containing the keys in the TwoKeyHashtable.</returns>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            var result = twoKeyHashtable.Keys();
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.Remove(System.Object,System.Object)">
            <summary>
            Removes the element with the two specified keys from the TwoKeyHashtable.
            </summary>
            <param name="key">The first key of the element to remove.</param>
            <param name="key2">The second key of the element to remove.</param>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            twoKeyHashtable.Remove("key", "key2");
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.RemoveRow(System.Object)">
            <summary>
            Removes the row with the specified key from the TwoKeyHashtable.
            </summary>
            <param name="key">The key of the row to remove.</param>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            twoKeyHashtable.RemoveRow("key");
            </code>
            </example>
        </member>
        <member name="M:ADN.DataStructures.TwoKeyHashtable.RowKeys(System.Object)">
            <summary>
            Gets an ICollection containing the keys of the specified row in the TwoKeyHashtable.
            </summary>
            <param name="key">The key of the row to gets the ICollection.</param>
            <returns>An ICollection containing the keys of the specified row in the TwoKeyHashtable.</returns>
            <example>
            <code lang="csharp">
            var twoKeyHashtable = new TwoKeyHashtable();
            twoKeyHashtable.Add("key", "key2", "value");
            var result = twoKeyHashtable.RowKeys("key");
            </code>
            </example>
        </member>
    </members>
</doc>
